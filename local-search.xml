<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机网络-http报文</title>
    <link href="/2021/01/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E6%8A%A5%E6%96%87/"/>
    <url>/2021/01/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-http%E6%8A%A5%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-http报文"><a href="#计算机网络-http报文" class="headerlink" title="计算机网络-http报文"></a>计算机网络-http报文</h1><h2 id="1、http报文概念"><a href="#1、http报文概念" class="headerlink" title="1、http报文概念"></a>1、http报文概念</h2><p>http报文就是http通信的基本单位,由8位字节流组成</p><h2 id="2、http报文的整体结构"><a href="#2、http报文的整体结构" class="headerlink" title="2、http报文的整体结构"></a>2、http报文的整体结构</h2><p>整体结构:报文首部 + 空行 + 报文实体<br>对于请求报文和响应报文又有区别</p><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><p>报文首部: 请求方法 + URI + HTTP版本 + HTTP首部字段<br>空行: CR + LF<br>报文实体: ….</p><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><p>报文首部: HTTP版本 + 状态码 + HTTP首部字段<br>空行: CR + LF<br>报文实体: ….</p><h2 id="3、HTTP报文具体组成"><a href="#3、HTTP报文具体组成" class="headerlink" title="3、HTTP报文具体组成"></a>3、HTTP报文具体组成</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络-基础篇</title>
    <link href="/2021/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2021/01/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="计算机网络-基础篇"><a href="#计算机网络-基础篇" class="headerlink" title="计算机网络-基础篇"></a>计算机网络-基础篇</h1><h2 id="1、HTTP-介绍"><a href="#1、HTTP-介绍" class="headerlink" title="1、HTTP 介绍"></a>1、HTTP 介绍</h2><p>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议。</p><p>设计HTTP最初的目的是为了提供一种发布和接收HTML页面的方法，它是一个基于 TCP/IP 通信协议来传输数据的应用层协议。</p><p>要注意的点就是：</p><ul><li>一句话概述HTTP</li><li>HTTP经典的几个版本</li><li>HTTP存在的位置</li></ul><h3 id="1-1-什么是http"><a href="#1-1-什么是http" class="headerlink" title="1.1 什么是http"></a>1.1 什么是http</h3><p>http是用于在计算机世界中两点进行传输文字、图片、音视频等超文本数据的 <strong>约定</strong> 和 <strong>规范</strong><br>http 通常跑在TCP/IP协议栈 之上,依靠IP协议实现寻址和路由,TCP协议实现可靠数据的传输,DNS协议实现域名查找,SSL/TLS协议实现数据的安全通信。<br>websocket、HTTPDNS 是依赖与http的。</p><h3 id="1-2-http的版本"><a href="#1-2-http的版本" class="headerlink" title="1.2 http的版本"></a>1.2 http的版本</h3><p>1.第一版 HTTP/0.9 于1990年问世，并没有作为正式的标准被建立。<br>2.作为正式的标准被建立是 HTTP/1.0，于1996年5月发布。<br>3.目前主流的版本是 HTTP/1.1，于1997年1月发布。<br>4.2015年5月 正式发布HTTP/2。(不叫HTTP/2.0，是因为标准委员会不打算发布子版本，下一个版本直接是HTTP/3)</p><h3 id="1-3-http存在的位置"><a href="#1-3-http存在的位置" class="headerlink" title="1.3 http存在的位置"></a>1.3 http存在的位置</h3><p><strong>计算机网络的7层模型</strong></p><p><strong>1</strong>、应用层：相当于对应用程序提供的接口，是为应用程序的通信服务的</p><p><strong>2</strong>、表示层：定义数据格式和加密</p><p><strong>3</strong>、会话层：定义了如何开始、控制和结束一个会话</p><p><strong>4</strong>、传输层：如果在传输的过程中，出现了丢包现象，要不要重传，这是传输层解决的问题，该层功能是选择传输协议，并添加协议头，比如TCP、UDP</p><p><strong>5</strong>、网络层：如何找到目标节点，如何选择到目标节点的最佳路径，网络层产生了，网络层为点对点的传输建立逻辑链路，并分组转发数据包。</p><p><strong>6</strong>、数据链路层：比特流的传输过程中，可能会出现错传或者数据不完整的情况，这时候数据链路层就应运而生了，该层将数据分帧传输，并对流控制，该层指定拓扑结构并提供硬件寻址。</p><p><strong>7</strong>、物理层：规定物理设备的标准（网线类型，光纤接口类型），该层传输的是比特流。<br><strong>这是计算机网络的7层模型</strong>,而http就处于TCP/IP模型中的第一层应用层</p><h2 id="2、HTTP-优点与缺点"><a href="#2、HTTP-优点与缺点" class="headerlink" title="2、HTTP 优点与缺点"></a>2、HTTP 优点与缺点</h2><h3 id="2-1-优点"><a href="#2-1-优点" class="headerlink" title="2.1 优点"></a>2.1 优点</h3><p><strong>1</strong>.Http协议支持客户端/服务端模式,也是一种请求/响应模式的协议</p><p><strong>2</strong>.灵活可拓展性,一个是语义上的自由，只规定了基本格式，其它的各部分没有严格的限制；第二个它允许传输任意类型的数据对象，例如文本、图片、音频等，传输的类型由Content-Type加以标记。</p><p><strong>3</strong>.继承子TCP/IP协议,可靠传输</p><p><strong>4</strong>.无状态,每一次的请求都是独立,不会影响上次一次和下一次请求。</p><h4 id="概括"><a href="#概括" class="headerlink" title="概括:"></a>概括:</h4><ul><li>建立一次TCP连接就可以进行多次的请求或响应交互,这是因为最开始每一次的请求都需要重新进行建立TCP连接,现在请求资源的数据越来越大,频繁的进行TCP连接对于通信是一个没有必要的开销。所以只要不是客户端或服务端任何一方提出断开连接的请求,则会一直保持TCP连接的状态。这样可以大大的减少服务端的负载,让请求变得更加的快。</li></ul><h3 id="2-2-缺点"><a href="#2-2-缺点" class="headerlink" title="2.2 缺点"></a>2.2 缺点</h3><p><strong>1</strong>.明文传输(不加密)，内容可能被窃听。协议里的报文不使用二进制数据，而是文本形式</p><p><strong>2</strong>.无法验证报文的完整性，内容可能被篡改。这里说的完整性也就是指信息的准确度 因为接收方或者发送方没有办法确认对方发送过来的数据在中间有没有被篡改</p><p><strong>3</strong>.不验证通信方的身份，有可能遭遇伪装。因为HTTP协议中不会对通信方进行确认 任何人都可以发送请求，而且服务器它对收到的请求也不会进行确认，只要收到了请求就会返回一个响应(当然这个只是在发送端的IP地址或者端口号没被Web服务器设定限制访问的前提下)</p><p><strong>4</strong>.无状态，不具备保存之前发送过的请求或响应的功能。它是缺点也是优点吧：</p><ul><li>对于一些长连接的场景需要保存上下文信息，以免传输重复的数据。</li><li>对于一些应用只是为了获取数据不需要保存上下文信息，无状态减少了网络开销。</li></ul><p><strong>5</strong>.队头阻塞：</p><ul><li>其根本原因在于HTTP是基于 请求-响应 的模型，在同一个TCP长连接中，前一个请求没有得到响应，后面的请求就会被阻塞。</li><li>用并发连接 和 域名分片 来解决了这个问题。但并不是从HTTP本身的层面来解决的，只是增加了 TCP 连接，分摊风险而已。</li><li>HTTP/2中的多路复用从HTTP本身的层面解决了这个问题</li><li>和TCP队头阻塞的区别：TCP传输的单位是数据包，它的队头阻塞表示的是前一个报文没有收到便不会将下一个报文上传给HTTP。而HTTP队头阻塞是在 请求-响应 层面，前一个请求还没有处理完，后面的请求就被阻塞。</li></ul><h2 id="3、Http-请求方式"><a href="#3、Http-请求方式" class="headerlink" title="3、Http 请求方式"></a>3、Http 请求方式</h2><h3 id="3-1请求种类"><a href="#3-1请求种类" class="headerlink" title="3.1请求种类"></a>3.1请求种类</h3><p>1、GET:获取资源<br>2、HEAD:获取报文首部,和GET类似但是区别于GET,HEAD是不返回报文主体<br>3、POST:创建或更新资源<br>4、PUT:创建或更新资源本身<br>5、PATCH:对资源进行局部更新<br>6、DELETE:删除资源,与PUT方式相反<br>7、OPTIONS:查询服务器支持的请求种类<br>8、建立连接隧道,一般用于代理服务器<br>9、TRACE：追踪请求，查询发出去的请求是怎样被加工/篡改的</p><ul><li>幂等:一个方法是不是幂等，其实就是判断一个方法重复执行多次，产生的效果是不是一样的，如果是幂等的话，它本质上意味着成功执行请求的结果和它的执行次数无关。只有「POST」和「PATCH」是非幂等的，其它都是幂等操作。</li></ul><h3 id="3-2-GET和POST的区别"><a href="#3-2-GET和POST的区别" class="headerlink" title="3.2 GET和POST的区别"></a>3.2 GET和POST的区别</h3><ul><li>缓存角度:GET请求会被浏览器主动进行缓存,而POST请求不会</li><li>编码角度:GET只能进行URL编码(通过url来进行数据的传递),所以只能接收ASCII字符,而POST没有限制</li><li>参数角度:GET只能放在url上进行传递,信息比较透明,POST请求将参数放在请求体中,相较GET请求来说比较安全</li><li>TCP角度:GET请求会一次性将请求报文给发送出去,而POST会分为两个TCP数据包(火狐浏览器除外),POST首先会将header部分的数据发送出去,待服务器响应100,则再发送body部分数据。GET和POST发送数据的分TCP数据包的方式,GET只发送一次速度肯定会比POST来的快,但是在网络好的情况下,这种差异可以忽略不计。而且在网络较差的情况下,两次包的TCP在验证数据的完整性上更加有优势。</li></ul><h2 id="4、状态码"><a href="#4、状态码" class="headerlink" title="4、状态码"></a>4、状态码</h2><h3 id="1xx-表示请求已经收到-但是需要进一步处理才能够完成"><a href="#1xx-表示请求已经收到-但是需要进一步处理才能够完成" class="headerlink" title="1xx  表示请求已经收到,但是需要进一步处理才能够完成"></a>1xx  表示请求已经收到,但是需要进一步处理才能够完成</h3><ul><li>101 Switching Protocols:在Http升级为websocket时,如果服务器同意变更,则返回101</li></ul><h3 id="2xx-表示请求成功"><a href="#2xx-表示请求成功" class="headerlink" title="2xx  表示请求成功"></a>2xx  表示请求成功</h3><ul><li>200 OK 请求成功,并且返回的数据中通常有响应体</li><li>204 No Content  与200一样,但是区别在于返回的数据中没有响应体</li><li>206 Patial Content  客户端进行了范围请求并且服务端进行了正常的处理</li></ul><h3 id="3xx-重定向"><a href="#3xx-重定向" class="headerlink" title="3xx  重定向"></a>3xx  重定向</h3><ul><li>301 Moved Permanently 永久重定向,重定向的地址为响应报文首部的Location字段。并且浏览器会进行缓存处理,如果还是输入之前的url,浏览器会自动访问重定向后的地址</li><li>302 Found  临时重定向,表示访问的地址临时被移动到其他的url上,与301不同的是浏览器不会进行缓存处理</li></ul><h3 id="4xx-客户端错误"><a href="#4xx-客户端错误" class="headerlink" title="4xx  客户端错误"></a>4xx  客户端错误</h3><ul><li>400 Bad Request   请求报文中存在语法错误</li><li>401 Unauthorized  需要有通过HTTP认证的认证信息或者表示用户认证失败</li><li>403 Forbidden     访问的资源被拒绝,原因:法律禁止、敏感信息</li><li>404 Not Found     请求资源未找到,表示没有在服务器上找到对应的资源</li></ul><h3 id="5xx-服务端错误"><a href="#5xx-服务端错误" class="headerlink" title="5xx  服务端错误"></a>5xx  服务端错误</h3><ul><li>500 Internal Server Error  服务器内部错误并且没有指明错误</li><li>502 Bad Gateway   服务器自身响应正常,但是通过代理的服务器无法获取到合法响应(ps:国内修改r星账户密码时跳转页面通常都是这个)</li><li>503 Service Unavailable   服务器内部超出负载或者停机维护</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>原型与原型链</title>
    <link href="/2021/01/03/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2021/01/03/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h1><p>把自己所理解的原型和原型链阐述清楚<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b91169c306924636aa45dbd835f70daf~tplv-k3u1fbpfcp-watermark.image" alt="原型与原型链"><br>最终就是要将👆图的一些逻辑关系彻底搞清楚</p><h2 id="1、原型"><a href="#1、原型" class="headerlink" title="1、原型"></a>1、原型</h2><h3 id="什么是原型？"><a href="#什么是原型？" class="headerlink" title="什么是原型？"></a>什么是原型？</h3><p>在JavaScript中,每当new 一个对象时,对象中都会有一些预留的属性。<br>而每一个对象都会有<strong>proto</strong> 的属性,这个属性所指向的函数对象上会有一个prototype属性,这个属性就是 这个函数对象的 原型对象<br>换个说法,就是猫猫会分很多品种,比如橘猫、布偶、黑猫警长…但是它们都会喵喵喵~。而它们不管是什么品种,它们都是猫,即 原型对象<br>举个栗子🌰👇:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>Cat.prototype.name = <span class="hljs-string">&#x27;cat&#x27;</span><br>Cat.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;喵喵喵~&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> jumao = <span class="hljs-keyword">new</span> Cat()<br>jumao.say()     <span class="hljs-comment">//喵喵喵~</span><br><br><span class="hljs-keyword">const</span> buou = <span class="hljs-keyword">new</span> Cat()<br>buou.say()      <span class="hljs-comment">//喵喵喵~</span><br><br><span class="hljs-built_in">console</span>.log(jumao.name == buou.name)    <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>通过定义一个Cat函数对象,并且在其prototype属性上添加name属性和say()方法,<br>这样通过Cat来new 出来的小猫咪(jumao和buou)实例都会有<code>name</code>属性和<code>say()</code>方法</p><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>比如定义一个函数对象 function Obj(){}<br>打印一下,看一下里面的结构</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">ƒ Obj()<br>    arguments: null<br>    caller: null<br>    length: <span class="hljs-number">0</span><br>    name: <span class="hljs-string">&quot;Obj&quot;</span><br>    prototype: &#123;constructor: ƒ&#125;<br>    __proto__: ƒ ()<br>    <span class="hljs-string">[[FunctionLocation]]</span>: VM97:<span class="hljs-number">1</span><br>    <span class="hljs-string">[[Scopes]]</span>: Scopes[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>我们可以发现里面有prototype和<strong>proto__两个原型属性<br>prototype 就是Obj的原型,而且这个prototype是函数对象独有的一个属性,原型其实也是一个对象<br>里面有一个constructor属性,这个用构造器,其实指向就是这个obj本身<br>而只要是对象都会有__proto__属性(这里可以不用管__proto</strong>,下面再说)</p><h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h3><p>我们通过Obj来创建一个Obj的实例对象o1,再打印一下o1的结构</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">let</span> <span class="hljs-string">o1</span> <span class="hljs-string">=</span> <span class="hljs-string">new</span> <span class="hljs-string">Obj()</span><br><span class="hljs-string">console.dir(o1)</span><br><br><span class="hljs-string">Obj</span><br><span class="hljs-attr">__proto__:</span><br>    <span class="hljs-attr">constructor:</span> <span class="hljs-string">ƒ</span> <span class="hljs-string">Obj()</span><br>        <span class="hljs-attr">arguments:</span> <span class="hljs-literal">null</span><br>        <span class="hljs-attr">caller:</span> <span class="hljs-literal">null</span><br>        <span class="hljs-attr">length:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Obj&quot;</span><br>        <span class="hljs-attr">prototype:</span><br>            <span class="hljs-attr">constructor:</span> <span class="hljs-string">ƒ</span> <span class="hljs-string">Obj()</span><br>            <span class="hljs-attr">__proto__:</span> <span class="hljs-string">Object</span><br>    <span class="hljs-attr">__proto__:</span><br>        <span class="hljs-attr">constructor:</span> <span class="hljs-string">ƒ</span> <span class="hljs-string">Object()</span><br><br></code></pre></td></tr></table></figure><p>可以发现o1中只有一个__proto__属性,相比函数对象Obj少了prototype,因为prototype是函数对象独有的属性,普通对象只有__proto__隐式原型<br>如打印台__proto__中有一个constructor 并且指向的是Obj,而Obj的原型上的constructor也是指向Obj<br>所以__proto__所指向的就是Obj的prototype</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">console.log(o1.__proto__<span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Obj</span>.</span></span>prototype)     <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="2、constructor"><a href="#2、constructor" class="headerlink" title="2、constructor"></a>2、constructor</h2><h3 id="什么是constructor"><a href="#什么是constructor" class="headerlink" title="什么是constructor"></a>什么是constructor</h3><p>在原型上有一个constructor属性,而这个属性的指向就是这个构造函数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Cat.prototype.constructor</span> === Cat   //<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>我们通过对象可以找到原型,再通过原型上的constructor属性可以找到构造函数,使用构造函数可以创建出对象,这是一个闭环。<br>使用代码表示👇</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> <span class="hljs-keyword">User</span>(<span class="hljs-type">name</span>)&#123;<br>    this.name = <span class="hljs-type">name</span><br>&#125;<br>let u1 = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>(<span class="hljs-string">&#x27;1号&#x27;</span>)<br>let u2 = <span class="hljs-built_in">new</span> u1.__proto__.constructor(<span class="hljs-string">&#x27;2号&#x27;</span>)    //相当于 let u2 = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>(<span class="hljs-string">&#x27;2号)</span><br></code></pre></td></tr></table></figure><h2 id="3、new"><a href="#3、new" class="headerlink" title="3、new"></a>3、new</h2><h3 id="new-所进行的操作"><a href="#new-所进行的操作" class="headerlink" title="new 所进行的操作"></a>new 所进行的操作</h3><p>可以先了解一下在new 一个对象时,其中进行了什么操作<br>1、先创建了一个空对象<br>2、将构造函数的作用域赋值给这个空对象<br>3、执行构造函数中的代码<br>4、将这个对象返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> Person = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name, age</span>) </span>&#123;<br>    <span class="hljs-comment">//1.创建一个新对象，赋予this，这一步是隐性的，</span><br>    <span class="hljs-comment">// let this = &#123;&#125;;</span><br>    <span class="hljs-comment">//2.给this指向的对象赋予构造属性</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-comment">//3.如果没有手动返回对象，则默认返回this指向的这个对象，也是隐性的</span><br>    <span class="hljs-comment">// return this;</span><br>&#125;;<br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><p>根据上面的逻辑,其实可以自己实现一个自己的new</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myNew</span><span class="hljs-params">(fn,<span class="hljs-rest_arg">...args</span>)</span></span>&#123;<br>    let obj = Object.create(fn.prototype)   <span class="hljs-comment">//创建一个空对象并且将this 赋予给他</span><br>    let res = fn.apply(obj,args)            <span class="hljs-comment">//执行构造函数中的代码</span><br>    <span class="hljs-keyword">return</span> res <span class="hljs-keyword">instanceof</span> Object?res:obj    <span class="hljs-comment">//将这个对象返回</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span><span class="hljs-params">(word)</span></span>&#123;<br>    <span class="hljs-keyword">this</span>.word = word<br>&#125;<br><br>Cat.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>    console.log(<span class="hljs-keyword">this</span>.word)<br>&#125;<br><br>let cat = myNew(Cat,<span class="hljs-string">&#x27;miaomiaomiao~&#x27;</span>)<br>cat.say()           <span class="hljs-comment">//miaomiaomiao~</span><br><br></code></pre></td></tr></table></figure><h2 id="4、原型链"><a href="#4、原型链" class="headerlink" title="4、原型链"></a>4、原型链</h2><p>其实在上面就已经使用到了原型链<br>在调用cat的say方法时,其实可以看到其实cat对象自己本身上是没有say方法的,<br>所以cat会沿着__proto__属性到Cat的原型对象上去找say方法,在Cat的原型对象上我们添加了say方法,<br>所以执行cat.say()时，能够正常执行输出预期的结果<br>如果我们调用cat.toString()会怎么样</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">cat.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>          <span class="hljs-comment">//[object Object]</span><br></code></pre></td></tr></table></figure><p>首先为什么没有报错呢,然后输出的[object Object]又是代表的什么意思呢<br>分析如下👇<br>肯定的是cat本身上是没有这个方法的,<br>所以先会沿着原型链__proto__属性找到Cat的原型对象中看看有没有toString()方法<br>我们只是在Cat.prototype上添加了say方法,没有添加toString方法<br>而原型对象也是一个对象,所以他也会有__proto__属性,所以就会继续沿着原型链向上找</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs delphi">console.log(cat.__proto__.__proto__)<br><span class="hljs-function"><span class="hljs-keyword">constructor</span>:</span> ƒ <span class="hljs-keyword">Object</span>()<br>    hasOwnProperty: ƒ hasOwnProperty()<br>    isPrototypeOf: ƒ isPrototypeOf()<br>    propertyIsEnumerable: ƒ propertyIsEnumerable()<br>    toLocaleString: ƒ toLocaleString()<br>    toString: ƒ toString()<br></code></pre></td></tr></table></figure><p>我们打印发现Cat原型对象的__proto__属性中有一个construtor属性,并且是指向Object<br>所以Cat原型对象是Object的实例<br>而且在Object对象的原型对象中可以找到toString()方法<br>而这个方法打印输出的就是该对象的属性字符串</p><h3 id="所以原型链就是沿着-proto-的一条链-可以自下往上找到想要的-而原型的尽头是null👍"><a href="#所以原型链就是沿着-proto-的一条链-可以自下往上找到想要的-而原型的尽头是null👍" class="headerlink" title="所以原型链就是沿着__proto__的一条链,可以自下往上找到想要的,而原型的尽头是null👍"></a>所以原型链就是沿着__proto__的一条链,可以自下往上找到想要的,而原型的尽头是null👍</h3><p>现在再回头看开头的那张图就清晰很多了🐂</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/02/hello-world/"/>
    <url>/2021/01/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>dom 相关</p><h2 id="dom元素操作"><a href="#dom元素操作" class="headerlink" title="dom元素操作"></a>dom元素操作</h2><h3 id="test-page"><a href="#test-page" class="headerlink" title="test page"></a>test page</h3><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
