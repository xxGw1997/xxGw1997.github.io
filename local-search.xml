<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>原型与原型链</title>
    <link href="/2021/01/03/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <url>/2021/01/03/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h1><p>把自己所理解的原型和原型链阐述清楚<br><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b91169c306924636aa45dbd835f70daf~tplv-k3u1fbpfcp-watermark.image" alt="原型与原型链"><br>最终就是要将👆图的一些逻辑关系彻底搞清楚</p><h2 id="1、原型"><a href="#1、原型" class="headerlink" title="1、原型"></a>1、原型</h2><h3 id="什么是原型？"><a href="#什么是原型？" class="headerlink" title="什么是原型？"></a>什么是原型？</h3><p>在JavaScript中,每当new 一个对象时,对象中都会有一些预留的属性。<br>而每一个对象都会有<strong>proto</strong> 的属性,这个属性所指向的函数对象上会有一个prototype属性,这个属性就是 这个函数对象的 原型对象<br>换个说法,就是猫猫会分很多品种,比如橘猫、布偶、黑猫警长…但是它们都会喵喵喵~。而它们不管是什么品种,它们都是猫,即 原型对象<br>举个栗子🌰👇:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>Cat.prototype.name = <span class="hljs-string">&#x27;cat&#x27;</span><br>Cat.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;喵喵喵~&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">const</span> jumao = <span class="hljs-keyword">new</span> Cat()<br>jumao.say()     <span class="hljs-comment">//喵喵喵~</span><br><br><span class="hljs-keyword">const</span> buou = <span class="hljs-keyword">new</span> Cat()<br>buou.say()      <span class="hljs-comment">//喵喵喵~</span><br><br><span class="hljs-built_in">console</span>.log(jumao.name == buou.name)    <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>通过定义一个Cat函数对象,并且在其prototype属性上添加name属性和say()方法,<br>这样通过Cat来new 出来的小猫咪(jumao和buou)实例都会有<code>name</code>属性和<code>say()</code>方法</p><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>比如定义一个函数对象 function Obj(){}<br>打印一下,看一下里面的结构</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs lua">ƒ Obj()<br>    arguments: null<br>    caller: null<br>    length: <span class="hljs-number">0</span><br>    name: <span class="hljs-string">&quot;Obj&quot;</span><br>    prototype: &#123;constructor: ƒ&#125;<br>    __proto__: ƒ ()<br>    <span class="hljs-string">[[FunctionLocation]]</span>: VM97:<span class="hljs-number">1</span><br>    <span class="hljs-string">[[Scopes]]</span>: Scopes[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>我们可以发现里面有prototype和<strong>proto__两个原型属性<br>prototype 就是Obj的原型,而且这个prototype是函数对象独有的一个属性,原型其实也是一个对象<br>里面有一个constructor属性,这个用构造器,其实指向就是这个obj本身<br>而只要是对象都会有__proto__属性(这里可以不用管__proto</strong>,下面再说)</p><h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h3><p>我们通过Obj来创建一个Obj的实例对象o1,再打印一下o1的结构</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">let</span> <span class="hljs-string">o1</span> <span class="hljs-string">=</span> <span class="hljs-string">new</span> <span class="hljs-string">Obj()</span><br><span class="hljs-string">console.dir(o1)</span><br><br><span class="hljs-string">Obj</span><br><span class="hljs-attr">__proto__:</span><br>    <span class="hljs-attr">constructor:</span> <span class="hljs-string">ƒ</span> <span class="hljs-string">Obj()</span><br>        <span class="hljs-attr">arguments:</span> <span class="hljs-literal">null</span><br>        <span class="hljs-attr">caller:</span> <span class="hljs-literal">null</span><br>        <span class="hljs-attr">length:</span> <span class="hljs-number">0</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Obj&quot;</span><br>        <span class="hljs-attr">prototype:</span><br>            <span class="hljs-attr">constructor:</span> <span class="hljs-string">ƒ</span> <span class="hljs-string">Obj()</span><br>            <span class="hljs-attr">__proto__:</span> <span class="hljs-string">Object</span><br>    <span class="hljs-attr">__proto__:</span><br>        <span class="hljs-attr">constructor:</span> <span class="hljs-string">ƒ</span> <span class="hljs-string">Object()</span><br><br></code></pre></td></tr></table></figure><p>可以发现o1中只有一个__proto__属性,相比函数对象Obj少了prototype,因为prototype是函数对象独有的属性,普通对象只有__proto__隐式原型<br>如打印台__proto__中有一个constructor 并且指向的是Obj,而Obj的原型上的constructor也是指向Obj<br>所以__proto__所指向的就是Obj的prototype</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">console.log(o1.__proto__<span class="hljs-operator"> === </span><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Obj</span>.</span></span>prototype)     <span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><h2 id="2、constructor"><a href="#2、constructor" class="headerlink" title="2、constructor"></a>2、constructor</h2><h3 id="什么是constructor"><a href="#什么是constructor" class="headerlink" title="什么是constructor"></a>什么是constructor</h3><p>在原型上有一个constructor属性,而这个属性的指向就是这个构造函数</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">Cat.prototype.constructor</span> === Cat   //<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>我们通过对象可以找到原型,再通过原型上的constructor属性可以找到构造函数,使用构造函数可以创建出对象,这是一个闭环。<br>使用代码表示👇</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">function</span> <span class="hljs-keyword">User</span>(<span class="hljs-type">name</span>)&#123;<br>    this.name = <span class="hljs-type">name</span><br>&#125;<br>let u1 = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>(<span class="hljs-string">&#x27;1号&#x27;</span>)<br>let u2 = <span class="hljs-built_in">new</span> u1.__proto__.constructor(<span class="hljs-string">&#x27;2号&#x27;</span>)    //相当于 let u2 = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>(<span class="hljs-string">&#x27;2号)</span><br></code></pre></td></tr></table></figure><h2 id="3、new"><a href="#3、new" class="headerlink" title="3、new"></a>3、new</h2><h3 id="new-所进行的操作"><a href="#new-所进行的操作" class="headerlink" title="new 所进行的操作"></a>new 所进行的操作</h3><p>可以先了解一下在new 一个对象时,其中进行了什么操作<br>1、先创建了一个空对象<br>2、将构造函数的作用域赋值给这个空对象<br>3、执行构造函数中的代码<br>4、将这个对象返回</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> Person = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name, age</span>) </span>&#123;<br>    <span class="hljs-comment">//1.创建一个新对象，赋予this，这一步是隐性的，</span><br>    <span class="hljs-comment">// let this = &#123;&#125;;</span><br>    <span class="hljs-comment">//2.给this指向的对象赋予构造属性</span><br>    <span class="hljs-built_in">this</span>.name = name;<br>    <span class="hljs-built_in">this</span>.age = age;<br>    <span class="hljs-comment">//3.如果没有手动返回对象，则默认返回this指向的这个对象，也是隐性的</span><br>    <span class="hljs-comment">// return this;</span><br>&#125;;<br><span class="hljs-keyword">const</span> p1 = <span class="hljs-keyword">new</span> Person();<br></code></pre></td></tr></table></figure><p>根据上面的逻辑,其实可以自己实现一个自己的new</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">myNew</span><span class="hljs-params">(fn,<span class="hljs-rest_arg">...args</span>)</span></span>&#123;<br>    let obj = Object.create(fn.prototype)   <span class="hljs-comment">//创建一个空对象并且将this 赋予给他</span><br>    let res = fn.apply(obj,args)            <span class="hljs-comment">//执行构造函数中的代码</span><br>    <span class="hljs-keyword">return</span> res <span class="hljs-keyword">instanceof</span> Object?res:obj    <span class="hljs-comment">//将这个对象返回</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Cat</span><span class="hljs-params">(word)</span></span>&#123;<br>    <span class="hljs-keyword">this</span>.word = word<br>&#125;<br><br>Cat.prototype.say = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span></span>&#123;<br>    console.log(<span class="hljs-keyword">this</span>.word)<br>&#125;<br><br>let cat = myNew(Cat,<span class="hljs-string">&#x27;miaomiaomiao~&#x27;</span>)<br>cat.say()           <span class="hljs-comment">//miaomiaomiao~</span><br><br></code></pre></td></tr></table></figure><h2 id="4、原型链"><a href="#4、原型链" class="headerlink" title="4、原型链"></a>4、原型链</h2><p>其实在上面就已经使用到了原型链<br>在调用cat的say方法时,其实可以看到其实cat对象自己本身上是没有say方法的,<br>所以cat会沿着__proto__属性到Cat的原型对象上去找say方法,在Cat的原型对象上我们添加了say方法,<br>所以执行cat.say()时，能够正常执行输出预期的结果<br>如果我们调用cat.toString()会怎么样</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">cat.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>          <span class="hljs-comment">//[object Object]</span><br></code></pre></td></tr></table></figure><p>首先为什么没有报错呢,然后输出的[object Object]又是代表的什么意思呢<br>分析如下👇<br>肯定的是cat本身上是没有这个方法的,<br>所以先会沿着原型链__proto__属性找到Cat的原型对象中看看有没有toString()方法<br>我们只是在Cat.prototype上添加了say方法,没有添加toString方法<br>而原型对象也是一个对象,所以他也会有__proto__属性,所以就会继续沿着原型链向上找</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs delphi">console.log(cat.__proto__.__proto__)<br><span class="hljs-function"><span class="hljs-keyword">constructor</span>:</span> ƒ <span class="hljs-keyword">Object</span>()<br>    hasOwnProperty: ƒ hasOwnProperty()<br>    isPrototypeOf: ƒ isPrototypeOf()<br>    propertyIsEnumerable: ƒ propertyIsEnumerable()<br>    toLocaleString: ƒ toLocaleString()<br>    toString: ƒ toString()<br></code></pre></td></tr></table></figure><p>我们打印发现Cat原型对象的__proto__属性中有一个construtor属性,并且是指向Object<br>所以Cat原型对象是Object的实例<br>而且在Object对象的原型对象中可以找到toString()方法<br>而这个方法打印输出的就是该对象的属性字符串</p><h3 id="所以原型链就是沿着-proto-的一条链-可以自下往上找到想要的-而原型的尽头是null👍"><a href="#所以原型链就是沿着-proto-的一条链-可以自下往上找到想要的-而原型的尽头是null👍" class="headerlink" title="所以原型链就是沿着__proto__的一条链,可以自下往上找到想要的,而原型的尽头是null👍"></a>所以原型链就是沿着__proto__的一条链,可以自下往上找到想要的,而原型的尽头是null👍</h3><p>现在再回头看开头的那张图就清晰很多了🐂</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/02/hello-world/"/>
    <url>/2021/01/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>dom 相关</p><h2 id="dom元素操作"><a href="#dom元素操作" class="headerlink" title="dom元素操作"></a>dom元素操作</h2><h3 id="test-page"><a href="#test-page" class="headerlink" title="test page"></a>test page</h3><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
